document.addEventListener("DOMContentLoaded", function() {
    const domainGrid = document.getElementById("domain-grid");
    const domainListBody = document.querySelector(".domain-list-body");
    const searchInput = document.getElementById("search-input");
    const searchButton = document.getElementById("search-button");
    const priceFilter = document.getElementById("price-filter");
    const tldFilter = document.getElementById("tld-filter");
    const sortSelect = document.getElementById("sort-select");
    const gridViewBtn = document.getElementById("grid-view-btn");
    const listViewBtn = document.getElementById("list-view-btn");
    const domainContainer = document.getElementById("domain-container");
    
    let allDomains = [];
    let currentView = 'list';

    function getUrlParameters() {
        const params = new URLSearchParams(window.location.search);
        return {
            search: params.get('search') || '',
            tld: params.get('tld') || '',
            maxPrice: params.get('maxPrice') || '',
            sort: params.get('sort') || 'name-asc'
        };
    }

    function updateUrl(params) {
        const url = new URL(window.location);
        Object.entries(params).forEach(([key, value]) => {
            if (value) {
                url.searchParams.set(key, value);
            } else {
                url.searchParams.delete(key);
            }
        });
        window.history.pushState({}, '', url);
    }

    // View Toggle Handlers
    gridViewBtn.addEventListener('click', () => {
        setView('grid');
    });

    listViewBtn.addEventListener('click', () => {
        setView('list');
    });

    function setView(view) {
        currentView = view;
        domainContainer.className = `${view}-view`;
        gridViewBtn.classList.toggle('active', view === 'grid');
        listViewBtn.classList.toggle('active', view === 'list');
        localStorage.setItem('preferredView', view);
    }

    // Load preferred view
    const savedView = localStorage.getItem('preferredView') || 'list';
    setView(savedView);

    function showLoading(element) {
        element.textContent = '';
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'loading';
        loadingDiv.textContent = 'Loading domains...';
        element.appendChild(loadingDiv);
    }

    showLoading(domainGrid);
    showLoading(domainListBody);

    function generateGradientColors(text) {
        const hue1 = (text.charCodeAt(0) * 7) % 360;
        const hue2 = (hue1 + 40) % 360;
        return {
            from: `hsl(${hue1}, 60%, 45%)`,
            to: `hsl(${hue2}, 65%, 40%)`
        };
    }

    function getCustomPreviewUrl(domainName) {
        const fileName = domainName.toLowerCase().replace('.', '_') + '.jpg';
        return `/data/output/custom_previews/${fileName}`;
    }

    // Apply filters from URL on page load
    const urlParams = getUrlParameters();
    if (urlParams.search) searchInput.value = urlParams.search;
    if (urlParams.tld) tldFilter.value = urlParams.tld;
    if (urlParams.maxPrice) priceFilter.value = urlParams.maxPrice;
    if (urlParams.sort) sortSelect.value = urlParams.sort;

    fetch('/data/output/domains.json')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(domains => {
            allDomains = domains;
            populateTldFilter(domains);
            
            // Apply initial filters from URL
            const filteredDomains = filterDomains(domains);
            displayDomains(filteredDomains);
            
            console.log(`Loaded ${domains.length} domains successfully`);
        })
        .catch(error => {
            console.error('Error loading domains:', error);
            function showError(element) {
                element.textContent = '';
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                
                const errorText = document.createElement('p');
                errorText.textContent = `Error loading domains: ${error.message}`;
                errorDiv.appendChild(errorText);
                
                const helpText = document.createElement('p');
                helpText.textContent = 'Please try refreshing the page or contact support if the problem persists.';
                errorDiv.appendChild(helpText);
                
                element.appendChild(errorDiv);
            }
            
            showError(domainGrid);
            showError(domainListBody);
        });

    function populateTldFilter(domains) {
        const tlds = [...new Set(domains.map(domain => domain.tld))].sort();
        tldFilter.textContent = '';
        
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = 'All';
        tldFilter.appendChild(defaultOption);
        
        tlds.forEach(tld => {
            const option = document.createElement('option');
            option.value = tld;
            option.textContent = `.${tld}`;
            tldFilter.appendChild(option);
        });

        // Set initial value from URL if present
        if (urlParams.tld) tldFilter.value = urlParams.tld;
    }

    function filterDomains(domains) {
        const searchTerm = searchInput.value.toLowerCase();
        const maxPrice = parseInt(priceFilter.value) || Infinity;
        const selectedTld = tldFilter.value;

        return domains.filter(domain => {
            const matchesSearch = domain.domainName.toLowerCase().includes(searchTerm);
            const matchesPrice = domain.price <= maxPrice;
            const matchesTld = !selectedTld || domain.tld === selectedTld;
            return matchesSearch && matchesPrice && matchesTld;
        });
    }

    function sortDomains(domains) {
        const [criteria, direction] = sortSelect.value.split('-');
        return [...domains].sort((a, b) => {
            let comparison = 0;
            if (criteria === 'name') {
                comparison = a.domainName.toLowerCase().localeCompare(b.domainName.toLowerCase());
            } else if (criteria === 'price') {
                comparison = a.price - b.price;
            }
            return direction === 'desc' ? -comparison : comparison;
        });
    }

    function createGridItem(domain) {
        const div = document.createElement("div");
        div.className = "domain-item";

        const contentDiv = document.createElement("div");
        contentDiv.className = "p-4";

        const h2 = document.createElement("h2");
        h2.className = "text-xl font-semibold text-gray-900 mb-2";
        h2.textContent = domain.domainName;
        contentDiv.appendChild(h2);

        const p = document.createElement("p");
        p.className = "text-lg font-bold text-green-600 mb-4";
        p.textContent = `$${domain.price.toLocaleString()}`;
        contentDiv.appendChild(p);

        const a = document.createElement("a");
        a.href = `domains/template.html?domain=${domain.domainName}`;
        console.log('Generated URL:', a.href);
        a.className = "buy-button";
        a.textContent = "View Details";
        contentDiv.appendChild(a);

        div.appendChild(contentDiv);
        return div;
    }

    function createListItem(domain) {
        const div = document.createElement("div");
        div.className = "domain-list-item";

        const [name, tld] = domain.domainName.split('.');

        const nameDiv = document.createElement("div");
        nameDiv.className = "domain-list-name";
        nameDiv.textContent = name;

        const tldDiv = document.createElement("div");
        tldDiv.className = "domain-list-tld";
        tldDiv.textContent = `.${tld}`;

        const priceDiv = document.createElement("div");
        priceDiv.className = "domain-list-price";
        priceDiv.textContent = `$${domain.price.toLocaleString()}`;

        const actionDiv = document.createElement("div");
        actionDiv.className = "domain-list-action";
        const a = document.createElement("a");
        a.href = `domains/template.html?domain=${domain.domainName}`;
        a.className = "buy-button";
        a.textContent = "View Details";
        actionDiv.appendChild(a);

        div.appendChild(nameDiv);
        div.appendChild(tldDiv);
        div.appendChild(priceDiv);
        div.appendChild(actionDiv);

        return div;
    }

    function displayDomains(domains) {
        const sortedDomains = sortDomains(domains);
        
        if (sortedDomains.length === 0) {
            const createNoResults = (element) => {
                element.textContent = '';
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                errorDiv.textContent = 'No domains found matching your criteria.';
                element.appendChild(errorDiv);
            };
            
            createNoResults(domainGrid);
            createNoResults(domainListBody);
            return;
        }
        
        domainGrid.textContent = '';
        sortedDomains.forEach(domain => {
            domainGrid.appendChild(createGridItem(domain));
        });

        domainListBody.textContent = '';
        sortedDomains.forEach(domain => {
            domainListBody.appendChild(createListItem(domain));
        });
    }

    // Event Listeners with URL updates
    searchButton.addEventListener('click', () => {
        const params = {
            search: searchInput.value,
            tld: tldFilter.value,
            maxPrice: priceFilter.value,
            sort: sortSelect.value
        };
        updateUrl(params);
        const filteredDomains = filterDomains(allDomains);
        displayDomains(filteredDomains);
    });

    searchInput.addEventListener('keyup', (e) => {
        if (e.key === 'Enter') {
            const params = {
                search: searchInput.value,
                tld: tldFilter.value,
                maxPrice: priceFilter.value,
                sort: sortSelect.value
            };
            updateUrl(params);
            const filteredDomains = filterDomains(allDomains);
            displayDomains(filteredDomains);
        }
    });

    priceFilter.addEventListener('change', () => {
        const params = {
            search: searchInput.value,
            tld: tldFilter.value,
            maxPrice: priceFilter.value,
            sort: sortSelect.value
        };
        updateUrl(params);
        const filteredDomains = filterDomains(allDomains);
        displayDomains(filteredDomains);
    });

    tldFilter.addEventListener('change', () => {
        const params = {
            search: searchInput.value,
            tld: tldFilter.value,
            maxPrice: priceFilter.value,
            sort: sortSelect.value
        };
        updateUrl(params);
        const filteredDomains = filterDomains(allDomains);
        displayDomains(filteredDomains);
    });

    sortSelect.addEventListener('change', () => {
        const params = {
            search: searchInput.value,
            tld: tldFilter.value,
            maxPrice: priceFilter.value,
            sort: sortSelect.value
        };
        updateUrl(params);
        const filteredDomains = filterDomains(allDomains);
        displayDomains(filteredDomains);
    });

    // Handle browser back/forward
    window.addEventListener('popstate', () => {
        const params = getUrlParameters();
        searchInput.value = params.search;
        tldFilter.value = params.tld;
        priceFilter.value = params.maxPrice;
        sortSelect.value = params.sort;
        const filteredDomains = filterDomains(allDomains);
        displayDomains(filteredDomains);
    });
});