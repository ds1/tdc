document.addEventListener("DOMContentLoaded", function() {
    runTests(); // Add this line at the start
    const isDetailPage = window.location.pathname.includes('/domains/');
    const basePath = isDetailPage ? '..' : '';
    const imagePath = `${basePath}/data/output/custom_previews/`;
    const dataPath = `${basePath}/data/output/domains.json`;

    if (isDetailPage) {
        handleDetailPage(imagePath, dataPath);
    } else {
        handleHomePage(imagePath, dataPath);
    }
});

function handleDetailPage(imagePath, dataPath) {
    const urlParams = new URLSearchParams(window.location.search);
    const domainName = urlParams.get('domain');
    
    if (!domainName) {
        console.error('No domain name provided in URL');
        return;
    }

    const previewSection = document.querySelector('.domain-preview');
    const gradientFallback = document.querySelector('.gradient-fallback');
    
    if (!previewSection || !gradientFallback) {
        console.error('Required preview elements not found:', { previewSection, gradientFallback });
        return;
    }

    const img = new Image();
    img.src = `${imagePath}${domainName.toLowerCase().replace('.', '_')}.jpg`;
    console.log('Loading detail image:', img.src);
    
    img.onload = function() {
        console.log('Detail image loaded successfully');
        img.style.display = 'block';
        gradientFallback.style.display = 'none';
        previewSection.insertBefore(img, gradientFallback);
    };
    
    img.onerror = function() {
        console.log('Detail image load failed, showing gradient fallback');
        gradientFallback.style.display = 'flex';
        
        const colors = generateGradientColors(domainName);
        gradientFallback.style.background = `linear-gradient(135deg, ${colors.from}, ${colors.to})`;
        
        const previewDomainName = gradientFallback.querySelector('.preview-domain-name');
        if (previewDomainName) {
            previewDomainName.textContent = domainName;
        }
    };

    fetch(dataPath)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(domains => {
            const domain = domains.find(d => d.domainName === domainName);
            if (!domain) {
                throw new Error(`Domain ${domainName} not found in database`);
            }

            console.log('Found domain data:', domain);

            const priceAmount = document.querySelector('.price-amount');
            if (priceAmount) {
                priceAmount.textContent = `$${domain.price.toLocaleString()}`;
            }

            const detailDomainName = document.getElementById('detail-domain-name');
            if (detailDomainName) {
                detailDomainName.textContent = domain.domainName;
            }

            document.title = `${domain.domainName} - TopDomain.Club`;

            document.querySelectorAll('.domain-name').forEach(el => {
                el.textContent = domain.domainName;
            });
            document.querySelectorAll('.domain-length').forEach(el => {
                el.textContent = domain.length;
            });
            document.querySelectorAll('.category').forEach(el => {
                el.textContent = domain.category || 'Premium';
            });
            document.querySelectorAll('.tld').forEach(el => {
                el.textContent = domain.tld;
            });
        })
        .catch(error => {
            console.error('Error loading domain data:', error);
            const container = document.querySelector('.container');
            if (container) {
                container.innerHTML = `
                    <div class="error-message">
                        <h2>Error Loading Domain</h2>
                        <p>Sorry, we couldn't load the domain details. Please try again later.</p>
                        <p class="error-details">Error: ${error.message}</p>
                    </div>
                `;
            }
        });

    const inquiryForm = document.getElementById('inquiry-form');
    const successMessage = document.getElementById('success-message');

    if (inquiryForm) {
        inquiryForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const email = this.querySelector('input[type="email"]').value;
            const subject = this.querySelector('input[type="text"]').value;
            const message = this.querySelector('textarea').value;

            console.log('Form submitted:', { email, subject, message });

            successMessage.style.display = 'block';
            this.reset();

            setTimeout(() => {
                successMessage.style.display = 'none';
            }, 5000);
        });
    }
}

function handleHomePage(imagePath, dataPath) {
    console.log('Starting handleHomePage');
    const elements = {
        domainGrid: document.getElementById("domain-grid"),
        domainListBody: document.querySelector(".domain-list-body"),
        searchInput: document.getElementById("search-input"),
        searchButton: document.getElementById("search-button"),
        priceFilter: document.getElementById("price-filter"),
        tldFilter: document.getElementById("tld-filter"),
        sortSelect: document.getElementById("sort-select"),
        gridViewBtn: document.getElementById("grid-view-btn"),
        listViewBtn: document.getElementById("list-view-btn"),
        domainContainer: document.getElementById("domain-container")
    };

    if (!validateElements(elements)) {
        console.error('Required elements not found for home page');
        return;
    }

    let allDomains = [];

    function validateElements(elements) {
        return Object.entries(elements).every(([key, element]) => {
            if (!element) {
                console.error(`Missing element: ${key}`);
                return false;
            }
            return true;
        });
    }

    function testViewSwitch() {
        console.log('Testing view switch');
        console.log('Before - Container classes:', elements.domainContainer?.className);
        setView('grid');
        console.log('After grid - Container classes:', elements.domainContainer?.className);
        setView('list');
        console.log('After list - Container classes:', elements.domainContainer?.className);
    }
    
    testViewSwitch();

    function setView(view) {
        const { domainContainer, gridViewBtn, listViewBtn } = elements;
        domainContainer.classList.remove('grid-view', 'list-view');
        domainContainer.classList.add(`${view}-view`);
        gridViewBtn.classList.toggle('active', view === 'grid');
        listViewBtn.classList.toggle('active', view === 'list');
        localStorage.setItem('preferredView', view);
    }

    elements.gridViewBtn.addEventListener('click', () => setView('grid'));
    elements.listViewBtn.addEventListener('click', () => setView('list'));

    const savedView = localStorage.getItem('preferredView') || 'list';
    setView(savedView);

    function showLoading(element) {
        element.textContent = '';
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'loading';
        loadingDiv.textContent = 'Loading domains...';
        element.appendChild(loadingDiv);
    }

    showLoading(elements.domainGrid);
    showLoading(elements.domainListBody);

    function createGridItem(domain) {
        const a = document.createElement("a");
        a.href = `domains/template.html?domain=${domain.domainName}`;
        a.className = "domain-item";

        const contentDiv = document.createElement("div");
        contentDiv.className = "domain-item-content";

        const imageContainer = document.createElement("div");
        imageContainer.className = "domain-item-image";

        const img = new Image();
        img.src = `${imagePath}${domain.domainName.toLowerCase().replace('.', '_')}.jpg`;
        console.log('Loading grid image:', img.src);
        
        img.onload = function() {
            imageContainer.appendChild(img);
        };
        
        img.onerror = function() {
            const gradientDiv = document.createElement("div");
            gradientDiv.className = "domain-item-gradient";
            const colors = generateGradientColors(domain.domainName);
            gradientDiv.style.background = `linear-gradient(135deg, ${colors.from}, ${colors.to})`;
            imageContainer.appendChild(gradientDiv);
        };

        contentDiv.appendChild(imageContainer);

        const [name, tld] = domain.domainName.split('.');
        const nameContainer = document.createElement("div");
        nameContainer.className = "domain-name-container";
        
        const nameSpan = document.createElement("span");
        nameSpan.className = "domain-name";
        nameSpan.textContent = name;
        
        const tldSpan = document.createElement("span");
        tldSpan.className = "domain-tld";
        tldSpan.textContent = `.${tld}`;
        
        nameContainer.appendChild(nameSpan);
        nameContainer.appendChild(tldSpan);
        contentDiv.appendChild(nameContainer);

        const price = document.createElement("div");
        price.className = "domain-price";
        price.textContent = `$${domain.price.toLocaleString()}`;
        contentDiv.appendChild(price);

        a.appendChild(contentDiv);
        return a;
    }

    function createListItem(domain) {
        const a = document.createElement("a");
        a.href = `domains/template.html?domain=${domain.domainName}`;
        a.className = "domain-list-item";

        const [name, tld] = domain.domainName.split('.');

        const nameDiv = document.createElement("div");
        nameDiv.className = "domain-list-name";
        nameDiv.textContent = name;

        const tldDiv = document.createElement("div");
        tldDiv.className = "domain-list-tld";
        tldDiv.textContent = `.${tld}`;

        const priceDiv = document.createElement("div");
        priceDiv.className = "domain-list-price";
        priceDiv.textContent = `$${domain.price.toLocaleString()}`;

        a.appendChild(nameDiv);
        a.appendChild(tldDiv);
        a.appendChild(priceDiv);

        return a;
    }

    function displayDomains(domains) {
        const { domainGrid, domainListBody } = elements;
        const sortedDomains = sortDomains(domains);
        
        if (sortedDomains.length === 0) {
            const createNoResults = (element) => {
                element.textContent = '';
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                errorDiv.textContent = 'No domains found matching your criteria.';
                element.appendChild(errorDiv);
            };
            
            createNoResults(domainGrid);
            createNoResults(domainListBody);
            return;
        }
        
        domainGrid.textContent = '';
        domainListBody.textContent = '';

        sortedDomains.forEach(domain => {
            domainGrid.appendChild(createGridItem(domain));
            domainListBody.appendChild(createListItem(domain));
        });
    }

    function getUrlParameters() {
        const params = new URLSearchParams(window.location.search);
        return {
            search: params.get('search') || '',
            tld: params.get('tld') || '',
            maxPrice: params.get('maxPrice') || '',
            sort: params.get('sort') || 'name-asc'
        };
    }

    function updateUrl(params) {
        const url = new URL(window.location);
        Object.entries(params).forEach(([key, value]) => {
            if (value) {
                url.searchParams.set(key, value);
            } else {
                url.searchParams.delete(key);
            }
        });
        window.history.pushState({}, '', url);
    }

    function populateTldFilter(domains) {
        const { tldFilter } = elements;
        const tlds = [...new Set(domains.map(domain => domain.tld))].sort();
        tldFilter.textContent = '';
        
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = 'All';
        tldFilter.appendChild(defaultOption);
        
        tlds.forEach(tld => {
            const option = document.createElement('option');
            option.value = tld;
            option.textContent = `.${tld}`;
            tldFilter.appendChild(option);
        });
    }

    function filterDomains(domains) {
        const { searchInput, priceFilter, tldFilter } = elements;
        const searchTerm = searchInput.value.toLowerCase();
        const maxPrice = parseInt(priceFilter.value) || Infinity;
        const selectedTld = tldFilter.value;

        return domains.filter(domain => {
            const matchesSearch = domain.domainName.toLowerCase().includes(searchTerm);
            const matchesPrice = domain.price <= maxPrice;
            const matchesTld = !selectedTld || domain.tld === selectedTld;
            return matchesSearch && matchesPrice && matchesTld;
        });
    }

    function sortDomains(domains) {
        const [criteria, direction] = elements.sortSelect.value.split('-');
        return [...domains].sort((a, b) => {
            let comparison = 0;
            if (criteria === 'name') {
                comparison = a.domainName.toLowerCase().localeCompare(b.domainName.toLowerCase());
            } else if (criteria === 'price') {
                comparison = a.price - b.price;
            }
            return direction === 'desc' ? -comparison : comparison;
        });
    }

    function updateFiltersAndDisplay() {
        const { searchInput, tldFilter, priceFilter, sortSelect } = elements;
        const params = {
            search: searchInput.value,
            tld: tldFilter.value,
            maxPrice: priceFilter.value,
            sort: sortSelect.value
        };
        updateUrl(params);
        const filteredDomains = filterDomains(allDomains);
        displayDomains(filteredDomains);
    }

    elements.searchButton.addEventListener('click', updateFiltersAndDisplay);
    elements.searchInput.addEventListener('keyup', (e) => {
        if (e.key === 'Enter') updateFiltersAndDisplay();
    });
    elements.priceFilter.addEventListener('change', updateFiltersAndDisplay);
    elements.tldFilter.addEventListener('change', updateFiltersAndDisplay);
    elements.sortSelect.addEventListener('change', updateFiltersAndDisplay);

    fetch(dataPath)
        .then(response => {
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return response.json();
        })
        .then(domains => {
            allDomains = domains;
            populateTldFilter(domains);
            
            const params = getUrlParameters();
            const { searchInput, tldFilter, priceFilter, sortSelect } = elements;
            
            if (params.search) searchInput.value = params.search;
            if (params.tld) tldFilter.value = params.tld;
            if (params.maxPrice) priceFilter.value = params.maxPrice;
            if (params.sort) sortSelect.value = params.sort;

            const filteredDomains = filterDomains(domains);
            displayDomains(filteredDomains);
        })
        .catch(error => {
            console.error('Error loading domains:', error);
            const showError = (element) => {
                element.textContent = '';
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                errorDiv.innerHTML = `
                    <p>Error loading domains: ${error.message}</p>
                    <p>Please try refreshing the page or contact support if the problem persists.</p>
                `;
                element.appendChild(errorDiv);
            };
            
            showError(elements.domainGrid);
            showError(elements.domainListBody);
        });

    window.addEventListener('popstate', () => {
        const params = getUrlParameters();
        const { searchInput, tldFilter, priceFilter, sortSelect } = elements;
        
        searchInput.value = params.search;
        tldFilter.value = params.tld;
        priceFilter.value = params.maxPrice;
        sortSelect.value = params.sort;
        
        const filteredDomains = filterDomains(allDomains);
        displayDomains(filteredDomains);
    });
}

function generateGradientColors(text) {
    const hue1 = (text.charCodeAt(0) * 7) % 360;
    const hue2 = (hue1 + 40) % 360;
    return {
        from: `hsl(${hue1}, 60%, 45%)`,
        to: `hsl(${hue2}, 65%, 40%)`
    };
}