document.addEventListener("DOMContentLoaded", function() {
    // Check if we're on a domain detail page
    const isDetailPage = window.location.pathname.includes('/domains/');

    if (isDetailPage) {
        // Domain detail page functionality
        const urlParams = new URLSearchParams(window.location.search);
        const domainName = urlParams.get('domain');

        console.log('Detail page loaded for domain:', domainName);

        if (!domainName) {
            console.error('No domain name provided in URL');
            return;
        }

        // Set up the domain preview section
        const previewSection = document.querySelector('.domain-preview');
        const gradientFallback = document.querySelector('.gradient-fallback');
        
        console.log('Found elements:', { 
            previewSection: !!previewSection, 
            gradientFallback: !!gradientFallback 
        });

        if (!previewSection || !gradientFallback) {
            console.error('Required preview elements not found:', { previewSection, gradientFallback });
            return;
        }

        // Create and set up the image element
        const img = new Image();
        img.src = `../data/output/custom_previews/${domainName.toLowerCase().replace('.', '_')}.jpg`;
        console.log('Attempting to load image:', img.src)

        // Handle successful image load
        img.onload = function() {
            console.log('Image loaded successfully');
            img.style.display = 'block';
            gradientFallback.style.display = 'none';
            previewSection.insertBefore(img, gradientFallback);
        };
        
        // Handle image load failure
        img.onerror = function() {
            console.log('Image failed to load, showing gradient fallback');
            gradientFallback.style.display = 'flex';
            
            const colors = generateGradientColors(domainName);
            gradientFallback.style.background = `linear-gradient(135deg, ${colors.from}, ${colors.to})`;
            console.log('Gradient colors:', colors);

            // Set domain name in fallback
            const previewDomainName = gradientFallback.querySelector('.preview-domain-name');
            if (previewDomainName) {
                previewDomainName.textContent = domainName;
                console.log('Set preview domain name');
            } else {
                console.error('Preview domain name element not found');
            }
        };
        
        // Update domain information
        fetch('../data/output/domains.json')
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(domains => {
                const domain = domains.find(d => d.domainName === domainName);
                if (!domain) {
                    throw new Error(`Domain ${domainName} not found in database`);
                }

                console.log('Found domain data:', domain);

                // Update price
                const priceAmount = document.querySelector('.price-amount');
                if (priceAmount) {
                    priceAmount.textContent = `$${domain.price.toLocaleString()}`;
                    console.log('Updated price');
                } else {
                    console.error('Price amount element not found');
                }

                // Update domain name heading
                const detailDomainName = document.getElementById('detail-domain-name');
                if (detailDomainName) {
                    detailDomainName.textContent = domain.domainName;
                    console.log('Updated domain name heading');
                } else {
                    console.error('Domain name heading element not found');
                }

                // Update page title
                document.title = `${domain.domainName} - TopDomain.Club`;

                // Update description fields
                document.querySelectorAll('.domain-name').forEach(el => {
                    el.textContent = domain.domainName;
                });
                document.querySelectorAll('.domain-length').forEach(el => {
                    el.textContent = domain.length;
                });
                document.querySelectorAll('.category').forEach(el => {
                    el.textContent = domain.category || 'Premium';
                });
                document.querySelectorAll('.tld').forEach(el => {
                    el.textContent = domain.tld;
                });
            })
            .catch(error => {
                console.error('Error loading domain data:', error);
                const container = document.querySelector('.container');
                if (container) {
                    container.innerHTML = `
                        <div class="error-message">
                            <h2>Error Loading Domain</h2>
                            <p>Sorry, we couldn't load the domain details. Please try again later.</p>
                            <p class="error-details">Error: ${error.message}</p>
                        </div>
                    `;
                }
            });
        
        const inquiryForm = document.getElementById('inquiry-form');
        const successMessage = document.getElementById('success-message');

        if (inquiryForm) {
            inquiryForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Get form values
                const email = this.querySelector('input[type="email"]').value;
                const subject = this.querySelector('input[type="text"]').value;
                const message = this.querySelector('textarea').value;

                // Here you would typically send this data to your server
                console.log('Form submitted:', { email, subject, message });

                // Show success message
                successMessage.style.display = 'block';
                
                // Clear form
                this.reset();

                // Hide success message after 5 seconds
                setTimeout(() => {
                    successMessage.style.display = 'none';
                }, 5000);
            });
        }
    } else {
        // Listing page functionality remains unchanged
        const domainGrid = document.getElementById("domain-grid");
        const domainListBody = document.querySelector(".domain-list-body");
        const searchInput = document.getElementById("search-input");
        const searchButton = document.getElementById("search-button");
        const priceFilter = document.getElementById("price-filter");
        const tldFilter = document.getElementById("tld-filter");
        const sortSelect = document.getElementById("sort-select");
        const gridViewBtn = document.getElementById("grid-view-btn");
        const listViewBtn = document.getElementById("list-view-btn");
        const domainContainer = document.getElementById("domain-container");
        
        let allDomains = [];
        let currentView = 'list';

        function getUrlParameters() {
            const params = new URLSearchParams(window.location.search);
            return {
                search: params.get('search') || '',
                tld: params.get('tld') || '',
                maxPrice: params.get('maxPrice') || '',
                sort: params.get('sort') || 'name-asc'
            };
        }

        function updateUrl(params) {
            const url = new URL(window.location);
            Object.entries(params).forEach(([key, value]) => {
                if (value) {
                    url.searchParams.set(key, value);
                } else {
                    url.searchParams.delete(key);
                }
            });
            window.history.pushState({}, '', url);
        }

        function setView(view) {
            currentView = view;
            domainContainer.className = `${view}-view`;
            gridViewBtn.classList.toggle('active', view === 'grid');
            listViewBtn.classList.toggle('active', view === 'list');
            localStorage.setItem('preferredView', view);
        }

        gridViewBtn.addEventListener('click', () => setView('grid'));
        listViewBtn.addEventListener('click', () => setView('list'));

        const savedView = localStorage.getItem('preferredView') || 'list';
        setView(savedView);

        function showLoading(element) {
            element.textContent = '';
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'loading';
            loadingDiv.textContent = 'Loading domains...';
            element.appendChild(loadingDiv);
        }

        showLoading(domainGrid);
        showLoading(domainListBody);

        function generateGradientColors(text) {
            const hue1 = (text.charCodeAt(0) * 7) % 360;
            const hue2 = (hue1 + 40) % 360;
            return {
                from: `hsl(${hue1}, 60%, 45%)`,
                to: `hsl(${hue2}, 65%, 40%)`
            };
        }

        function createGridItem(domain) {
            const a = document.createElement("a");
            a.href = `domains/template.html?domain=${domain.domainName}`;
            a.className = "domain-item";

            const contentDiv = document.createElement("div");
            contentDiv.className = "domain-item-content";

            // Create image container
            const imageContainer = document.createElement("div");
            imageContainer.className = "domain-item-image";

            // Try to load the custom preview image
            const img = new Image();
            img.src = `/data/output/custom_previews/${domain.domainName.toLowerCase().replace('.', '_')}.jpg`;
            
            // Handle image load success
            img.onload = function() {
                imageContainer.appendChild(img);
            };
            
            // Handle image load failure - create gradient fallback
            img.onerror = function() {
                const gradientDiv = document.createElement("div");
                gradientDiv.className = "domain-item-gradient";
                const colors = generateGradientColors(domain.domainName);
                gradientDiv.style.background = `linear-gradient(135deg, ${colors.from}, ${colors.to})`;
                imageContainer.appendChild(gradientDiv);
            };

            contentDiv.appendChild(imageContainer);

            // Domain name with larger font
            const [name, tld] = domain.domainName.split('.');
            const nameContainer = document.createElement("div");
            nameContainer.className = "domain-name-container";
            
            const nameSpan = document.createElement("span");
            nameSpan.className = "domain-name";
            nameSpan.textContent = name;
            
            const tldSpan = document.createElement("span");
            tldSpan.className = "domain-tld";
            tldSpan.textContent = `.${tld}`;
            
            nameContainer.appendChild(nameSpan);
            nameContainer.appendChild(tldSpan);
            contentDiv.appendChild(nameContainer);

            // Price
            const price = document.createElement("div");
            price.className = "domain-price";
            price.textContent = `$${domain.price.toLocaleString()}`;
            contentDiv.appendChild(price);

            a.appendChild(contentDiv);
            return a;
        }

        function createListItem(domain) {
            const a = document.createElement("a");
            a.href = `domains/template.html?domain=${domain.domainName}`;
            a.className = "domain-list-item";

            const [name, tld] = domain.domainName.split('.');

            const nameDiv = document.createElement("div");
            nameDiv.className = "domain-list-name";
            nameDiv.textContent = name;

            const tldDiv = document.createElement("div");
            tldDiv.className = "domain-list-tld";
            tldDiv.textContent = `.${tld}`;

            const priceDiv = document.createElement("div");
            priceDiv.className = "domain-list-price";
            priceDiv.textContent = `$${domain.price.toLocaleString()}`;

            a.appendChild(nameDiv);
            a.appendChild(tldDiv);
            a.appendChild(priceDiv);

            return a;
        }

        function displayDomains(domains) {
            const sortedDomains = sortDomains(domains);
            
            if (sortedDomains.length === 0) {
                const createNoResults = (element) => {
                    element.textContent = '';
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'error-message';
                    errorDiv.textContent = 'No domains found matching your criteria.';
                    element.appendChild(errorDiv);
                };
                
                createNoResults(domainGrid);
                createNoResults(domainListBody);
                return;
            }
            
            domainGrid.textContent = '';
            sortedDomains.forEach(domain => {
                domainGrid.appendChild(createGridItem(domain));
            });

            domainListBody.textContent = '';
            sortedDomains.forEach(domain => {
                domainListBody.appendChild(createListItem(domain));
            });
        }

        function populateTldFilter(domains) {
            const tlds = [...new Set(domains.map(domain => domain.tld))].sort();
            tldFilter.textContent = '';
            
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = 'All';
            tldFilter.appendChild(defaultOption);
            
            tlds.forEach(tld => {
                const option = document.createElement('option');
                option.value = tld;
                option.textContent = `.${tld}`;
                tldFilter.appendChild(option);
            });
        }

        function filterDomains(domains) {
            const searchTerm = searchInput.value.toLowerCase();
            const maxPrice = parseInt(priceFilter.value) || Infinity;
            const selectedTld = tldFilter.value;

            return domains.filter(domain => {
                const matchesSearch = domain.domainName.toLowerCase().includes(searchTerm);
                const matchesPrice = domain.price <= maxPrice;
                const matchesTld = !selectedTld || domain.tld === selectedTld;
                return matchesSearch && matchesPrice && matchesTld;
            });
        }

        function sortDomains(domains) {
            const [criteria, direction] = sortSelect.value.split('-');
            return [...domains].sort((a, b) => {
                let comparison = 0;
                if (criteria === 'name') {
                    comparison = a.domainName.toLowerCase().localeCompare(b.domainName.toLowerCase());
                } else if (criteria === 'price') {
                    comparison = a.price - b.price;
                }
                return direction === 'desc' ? -comparison : comparison;
            });
        }

        function updateFiltersAndDisplay() {
            const params = {
                search: searchInput.value,
                tld: tldFilter.value,
                maxPrice: priceFilter.value,
                sort: sortSelect.value
            };
            updateUrl(params);
            const filteredDomains = filterDomains(allDomains);
            displayDomains(filteredDomains);
        }

        // Event Listeners
        searchButton.addEventListener('click', updateFiltersAndDisplay);
        searchInput.addEventListener('keyup', (e) => {
            if (e.key === 'Enter') updateFiltersAndDisplay();
        });
        priceFilter.addEventListener('change', updateFiltersAndDisplay);
        tldFilter.addEventListener('change', updateFiltersAndDisplay);
        sortSelect.addEventListener('change', updateFiltersAndDisplay);

        // Load domains
        fetch('/data/output/domains.json')
            .then(response => {
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                return response.json();
            })
            .then(domains => {
                allDomains = domains;
                populateTldFilter(domains);
                
                const params = getUrlParameters();
                if (params.search) searchInput.value = params.search;
                if (params.tld) tldFilter.value = params.tld;
                if (params.maxPrice) priceFilter.value = params.maxPrice;
                if (params.sort) sortSelect.value = params.sort;

                const filteredDomains = filterDomains(domains);
                displayDomains(filteredDomains);
            })
            .catch(error => {
                console.error('Error loading domains:', error);
                const showError = (element) => {
                    element.textContent = '';
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'error-message';
                    errorDiv.innerHTML = `
                        <p>Error loading domains: ${error.message}</p>
                        <p>Please try refreshing the page or contact support if the problem persists.</p>
                    `;
                    element.appendChild(errorDiv);
                };
                
                showError(domainGrid);
                showError(domainListBody);
            });

        // Handle browser back/forward
        window.addEventListener('popstate', () => {
            const params = getUrlParameters();
            searchInput.value = params.search;
            tldFilter.value = params.tld;
            priceFilter.value = params.maxPrice;
            sortSelect.value = params.sort;
            const filteredDomains = filterDomains(allDomains);
            displayDomains(filteredDomains);
        });
    }
});