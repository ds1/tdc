document.addEventListener("DOMContentLoaded", function() {
    // Check if we're on a domain detail page
    const isDetailPage = window.location.pathname.includes('/domains/');

    if (isDetailPage) {
        // Domain detail page functionality
        const urlParams = new URLSearchParams(window.location.search);
        const domainName = urlParams.get('domain');

        if (!domainName) {
            console.error('No domain name provided in URL');
            return;
        }

        // Set up the domain preview section
        const previewSection = document.querySelector('.domain-preview');
        const gradientFallback = document.querySelector('.gradient-fallback');
        
        if (!previewSection || !gradientFallback) {
            console.error('Required preview elements not found:', { previewSection, gradientFallback });
            return;
        }

        // Create and set up the image element
        const img = new Image();
        img.src = `../data/output/custom_previews/${domainName.toLowerCase().replace('.', '_')}.jpg`;
        console.log('Attempting to load image:', img.src);
        
        // Handle successful image load
        img.onload = function() {
            console.log('Image loaded successfully');
            img.style.display = 'block';
            gradientFallback.style.display = 'none';
            previewSection.insertBefore(img, gradientFallback);
        };
        
        // Handle image load failure
        img.onerror = function() {
            console.log('Image failed to load, showing gradient fallback');
            gradientFallback.style.display = 'flex';
            
            const colors = generateGradientColors(domainName);
            gradientFallback.style.background = `linear-gradient(135deg, ${colors.from}, ${colors.to})`;
            console.log('Gradient colors:', colors);

            // Set domain name in fallback
            const previewDomainName = gradientFallback.querySelector('.preview-domain-name');
            if (previewDomainName) {
                previewDomainName.textContent = domainName;
                console.log('Set preview domain name');
            } else {
                console.error('Preview domain name element not found');
            }
        };

        // Update domain information
        fetch('../data/output/domains.json')
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(domains => {
                const domain = domains.find(d => d.domainName === domainName);
                if (!domain) {
                    throw new Error(`Domain ${domainName} not found in database`);
                }

                console.log('Found domain data:', domain);

                // Update price
                const priceAmount = document.querySelector('.price-amount');
                if (priceAmount) {
                    priceAmount.textContent = `$${domain.price.toLocaleString()}`;
                    console.log('Updated price');
                } else {
                    console.error('Price amount element not found');
                }

                // Update domain name heading
                const detailDomainName = document.getElementById('detail-domain-name');
                if (detailDomainName) {
                    detailDomainName.textContent = domain.domainName;
                    console.log('Updated domain name heading');
                } else {
                    console.error('Domain name heading element not found');
                }

                // Update page title
                document.title = `${domain.domainName} - TopDomain.Club`;

                // Update description fields
                document.querySelectorAll('.domain-name').forEach(el => {
                    el.textContent = domain.domainName;
                });
                document.querySelectorAll('.domain-length').forEach(el => {
                    el.textContent = domain.length;
                });
                document.querySelectorAll('.category').forEach(el => {
                    el.textContent = domain.category || 'Premium';
                });
                document.querySelectorAll('.tld').forEach(el => {
                    el.textContent = domain.tld;
                });
            })
            .catch(error => {
                console.error('Error loading domain data:', error);
                const container = document.querySelector('.container');
                if (container) {
                    container.innerHTML = `
                        <div class="error-message">
                            <h2>Error Loading Domain</h2>
                            <p>Sorry, we couldn't load the domain details. Please try again later.</p>
                            <p class="error-details">Error: ${error.message}</p>
                        </div>
                    `;
                }
            });

            // Get form elements
            const inquiryForm = document.getElementById('inquiry-form');
            const successMessage = document.getElementById('success-message');

            if (inquiryForm) {
                // Get domain data when page loads
                const urlParams = new URLSearchParams(window.location.search);
                const domainName = urlParams.get('domain');
                
                // Set domain name in the hidden field
                const domainField = document.getElementById('domain-field');
                if (domainField && domainName) {
                    domainField.value = domainName;
                }
                
                // Set formspree subject
                const formspreeSubject = document.getElementById('formspree-subject');
                if (formspreeSubject && domainName) {
                    formspreeSubject.value = `Inquiry about ${domainName}`;
                }
                
                // When price data is loaded, set the price field
                fetch('../data/output/domains.json')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(domains => {
                        const domain = domains.find(d => d.domainName === domainName);
                        if (domain) {
                            const priceField = document.getElementById('price-field');
                            if (priceField) {
                                priceField.value = `$${domain.price.toLocaleString()}`;
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error setting price in form:', error);
                    });
                
                // Handle form submission - REMOVE preventDefault to allow actual submission
                inquiryForm.addEventListener('submit', function(e) {
                    // Do not use e.preventDefault() here - we want the form to submit to Formspree
                    
                    // You can add validation here if needed
                    const email = this.querySelector('input[type="email"]').value;
                    const subject = this.querySelector('input[type="text"]').value;
                    const message = this.querySelector('textarea').value;
                    
                    if (!email || !subject || !message) {
                        e.preventDefault();
                        alert('Please fill all fields');
                        return;
                    }
                    
                    // Log for debugging
                    console.log('Form being submitted:', { 
                        email, 
                        subject, 
                        message, 
                        domain: domainField.value, 
                        price: document.getElementById('price-field').value 
                    });
                    
                    // Form will submit to Formspree and redirect to the URL in _next hidden field
                    // Formspree handles the email sending
                    
                    // If you want to show a success message before redirect,
                    // you could do:
                    // successMessage.style.display = 'block';
                    // setTimeout(() => form.submit(), 2000);
                    // but this is usually handled by Formspree's redirect
                });
            }
    } else {
        // Listing page functionality
        const domainGrid = document.getElementById("domain-grid");
        const domainListBody = document.querySelector(".domain-list-body");
        const searchInput = document.getElementById("search-input");
        const searchButton = document.getElementById("search-button");
        const priceFilter = document.getElementById("price-filter");
        const tldFilter = document.getElementById("tld-filter");
        const sortSelect = document.getElementById("sort-select");
        const gridViewBtn = document.getElementById("grid-view-btn");
        const listViewBtn = document.getElementById("list-view-btn");
        const domainContainer = document.getElementById("domain-container");
        
        let allDomains = [];
        let currentView = 'list';

        function getUrlParameters() {
            const params = new URLSearchParams(window.location.search);
            return {
                search: params.get('search') || '',
                tld: params.get('tld') || '',
                maxPrice: params.get('maxPrice') || '',
                sort: params.get('sort') || 'name-asc'
            };
        }

        function updateUrl(params) {
            const url = new URL(window.location);
            Object.entries(params).forEach(([key, value]) => {
                if (value) {
                    url.searchParams.set(key, value);
                } else {
                    url.searchParams.delete(key);
                }
            });
            window.history.pushState({}, '', url);
        }

        gridViewBtn.addEventListener('click', () => setView('grid'));
        listViewBtn.addEventListener('click', () => setView('list'));

        console.log('View buttons:', {
            grid: !!gridViewBtn,
            list: !!listViewBtn
        });

        function setView(view) {
            console.log('Setting view to:', view);
            currentView = view;

            domainContainer.classList.remove('grid-view', 'list-view');

            domainContainer.classList.add(`${view}-view`);

            // Update button states
            gridViewBtn.classList.remove('active');
            listViewBtn.classList.remove('active');
            if (view === 'grid') {
                gridViewBtn.classList.add('active');
            } else {
                listViewBtn.classList.add('active');
            }
    
            // Store preference
            localStorage.setItem('preferredView', view);
            
            // Re-display domains in new view
            displayDomains(filterDomains(allDomains));
        }

        const savedView = localStorage.getItem('preferredView') || 'grid';
        setView(savedView);

        function showLoading(element) {
            element.textContent = '';
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'loading';
            loadingDiv.textContent = 'Loading domains...';
            element.appendChild(loadingDiv);
        }

        showLoading(domainGrid);
        showLoading(domainListBody);

        function generateGradientColors(text) {
            const hue1 = (text.charCodeAt(0) * 7) % 360;
            const hue2 = (hue1 + 40) % 360;
            return {
                from: `hsl(${hue1}, 60%, 45%)`,
                to: `hsl(${hue2}, 65%, 40%)`
            };
        }

        function createGridItem(domain) {
            const a = document.createElement("a");
            a.href = `http://${domain.domainName}`;
            a.target = "_blank"; // Open in new tab
            a.className = "domain-item";

            const contentDiv = document.createElement("div");
            contentDiv.className = "domain-item-content";

            // Create image container
            const imageContainer = document.createElement("div");
            imageContainer.className = "domain-item-image";

            // Try to load the custom preview image
            const img = new Image();
            img.src = `/data/output/custom_previews/${domain.domainName.toLowerCase().replace('.', '_')}.jpg`;
            
            // Handle image load success
            img.onload = function() {
                imageContainer.appendChild(img);
            };
            
            // Handle image load failure - create gradient fallback
            img.onerror = function() {
                const gradientDiv = document.createElement("div");
                gradientDiv.className = "domain-item-gradient";
                const colors = generateGradientColors(domain.domainName);
                gradientDiv.style.background = `linear-gradient(135deg, ${colors.from}, ${colors.to})`;
                imageContainer.appendChild(gradientDiv);
            };

            contentDiv.appendChild(imageContainer);

            const [name, tld] = domain.domainName.split('.');
            const nameContainer = document.createElement("div");
            nameContainer.className = "domain-name-container";
            
            const nameSpan = document.createElement("span");
            nameSpan.className = "domain-name";
            nameSpan.textContent = name;
            
            const tldSpan = document.createElement("span");
            tldSpan.className = "domain-tld";
            tldSpan.textContent = `.${tld}`;
            
            nameContainer.appendChild(nameSpan);
            nameContainer.appendChild(tldSpan);
            contentDiv.appendChild(nameContainer);

            const price = document.createElement("div");
            price.className = "domain-price";
            price.textContent = `$${domain.price.toLocaleString()}`;
            contentDiv.appendChild(price);

            a.appendChild(contentDiv);
            return a;
        }

        function createListItem(domain) {
            const a = document.createElement("a");
            a.href = `http://${domain.domainName}`;
            a.target = "_blank"; // Open in new tab
            a.className = "domain-list-item";

            const [name, tld] = domain.domainName.split('.');

            const nameDiv = document.createElement("div");
            nameDiv.className = "domain-list-name";
            nameDiv.textContent = name;

            const tldDiv = document.createElement("div");
            tldDiv.className = "domain-list-tld";
            tldDiv.textContent = `.${tld}`;

            const priceDiv = document.createElement("div");
            priceDiv.className = "domain-list-price";
            priceDiv.textContent = `$${domain.price.toLocaleString()}`;

            a.appendChild(nameDiv);
            a.appendChild(tldDiv);
            a.appendChild(priceDiv);

            return a;
        }

        function displayDomains(domains) {
            console.log('Display domains:', {
                currentView,
                domainCount: domains.length,
                gridContainer: !!domainGrid,
                listContainer: !!domainListBody,
                containerClasses: domainContainer.className
            });
            
            const sortedDomains = sortDomains(domains);
            
            if (sortedDomains.length === 0) {
                const createNoResults = (element) => {
                    element.textContent = '';
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'error-message';
                    errorDiv.textContent = 'No domains found matching your criteria.';
                    element.appendChild(errorDiv);
                };
                
                createNoResults(domainGrid);
                createNoResults(domainListBody);
                return;
            }
            
            // Clear both containers
            domainGrid.textContent = '';
            domainListBody.textContent = '';

            // Only populate the active view
            if (currentView === 'grid') {
                sortedDomains.forEach(domain => {
                    domainGrid.appendChild(createGridItem(domain));
                });
            } else {
                sortedDomains.forEach(domain => {
                    domainListBody.appendChild(createListItem(domain));
                });
            }
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function initializeAutocomplete() {
            const searchInput = document.getElementById('search-input');
            const autocompleteContainer = document.createElement('div');
            autocompleteContainer.className = 'autocomplete-container';
            searchInput.parentNode.appendChild(autocompleteContainer);

            searchInput.addEventListener('input', debounce((e) => {
                const value = e.target.value.toLowerCase();
                
                // If search is cleared, update the domain list
                if (value.length === 0) {
                    autocompleteContainer.style.display = 'none';
                    updateFiltersAndDisplay(); // Trigger domain list update
                    return;
                }

                if (value.length < 2) {
                    autocompleteContainer.style.display = 'none';
                    return;
                }

                const matches = allDomains
                    .filter(domain => domain.domainName.toLowerCase().includes(value))

                if (matches.length > 0) {
                    autocompleteContainer.innerHTML = matches
                        .map(domain => `
                            <div class="autocomplete-item" data-domain="${domain.domainName}">
                                <span class="domain-name">${domain.domainName}</span>
                            </div>
                        `).join('');
                    autocompleteContainer.style.display = 'block';
                } else {
                    autocompleteContainer.style.display = 'none';
                }
            }, 200));

            // Handle item selection
            autocompleteContainer.addEventListener('click', (e) => {
                const item = e.target.closest('.autocomplete-item');
                if (item) {
                    searchInput.value = item.dataset.domain;
                    autocompleteContainer.style.display = 'none';
                    updateFiltersAndDisplay();
                }
            });

            // Hide autocomplete when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('#search-wrapper')) {
                    autocompleteContainer.style.display = 'none';
                }
            });

            // Add keyboard navigation
            searchInput.addEventListener('keydown', (e) => {
                const items = autocompleteContainer.querySelectorAll('.autocomplete-item');
                const current = autocompleteContainer.querySelector('.autocomplete-item.active');
                
                if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
                    e.preventDefault();
                    if (!items.length) return;
                    
                    let next;
                    if (!current) {
                        next = e.key === 'ArrowDown' ? items[0] : items[items.length - 1];
                    } else {
                        const currentIndex = Array.from(items).indexOf(current);
                        const nextIndex = e.key === 'ArrowDown' ? 
                            (currentIndex + 1) % items.length : 
                            (currentIndex - 1 + items.length) % items.length;
                        next = items[nextIndex];
                    }
                    
                    if (current) current.classList.remove('active');
                    next.classList.add('active');
                } else if (e.key === 'Enter') {
                    e.preventDefault();
                    if (current) {
                        // If an item is highlighted, select it
                        searchInput.value = current.dataset.domain;
                    }
                    // Hide autocomplete container regardless of whether an item was selected
                    autocompleteContainer.style.display = 'none';
                    updateFiltersAndDisplay();
                }
            });
        }

        function makeSelectSearchable(select) {
            // Create wrapper and search input
            const wrapper = document.createElement('div');
            wrapper.className = 'searchable-select-wrapper';
            select.parentNode.insertBefore(wrapper, select);
            wrapper.appendChild(select);

            const inputWrapper = document.createElement('div');
            inputWrapper.className = 'searchable-input-wrapper';

            const searchInput = document.createElement('input');
            searchInput.type = 'text';
            searchInput.className = 'searchable-select-input';
            searchInput.placeholder = 'Search TLD...';

            // Add dropdown icon
            const dropdownIcon = document.createElement('div');
            dropdownIcon.className = 'dropdown-icon';
            dropdownIcon.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" 
                    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M6 9l6 6 6-6"/>
                </svg>
            `;

            // Create dropdown container
            const dropdownContainer = document.createElement('div');
            dropdownContainer.className = 'searchable-select-dropdown';

            // Get all options and store them
            const allOptions = Array.from(select.options);
            
            // Create the custom dropdown
            function createDropdown(filterText = '') {
                dropdownContainer.innerHTML = '';
                let filteredOptions = allOptions;
                
                // Only filter if there's search text and it's not "All"
                if (filterText && filterText.toLowerCase() !== 'all') {
                    filteredOptions = allOptions.filter(opt => 
                        opt.text.toLowerCase().includes(filterText.toLowerCase())
                    );
                }

                // Always show "All" option first
                const allOption = allOptions.find(opt => opt.text === 'All');
                if (allOption) {
                    const allItem = createDropdownItem(allOption);
                    dropdownContainer.appendChild(allItem);
                }

                // Show other options
                filteredOptions
                    .filter(opt => opt.text !== 'All')
                    .forEach(opt => {
                        const item = createDropdownItem(opt);
                        dropdownContainer.appendChild(item);
                    });
            }

            function createDropdownItem(opt) {
                const item = document.createElement('div');
                item.className = 'searchable-select-item';
                if (opt.value === select.value) {
                    item.classList.add('selected');
                }
                item.textContent = opt.text;
                item.dataset.value = opt.value;
                
                item.addEventListener('click', () => {
                    select.value = opt.value;
                    searchInput.value = opt.text;
                    dropdownContainer.style.display = 'none';
                    dropdownIcon.classList.remove('active');
                    select.dispatchEvent(new Event('change'));
                    updateFiltersAndDisplay();
                });
                
                return item;
            }

            function updateSelected() {
                const selectedOption = select.options[select.selectedIndex];
                // Only set the input value if it's empty or a selection was made
                if (!searchInput.value || document.activeElement !== searchInput) {
                    searchInput.value = selectedOption ? selectedOption.text : '';
                }
            }

            // Handle input interactions
            searchInput.addEventListener('focus', () => {
                createDropdown(searchInput.value);
                dropdownContainer.style.display = 'block';
                dropdownIcon.classList.add('active');
            });

            searchInput.addEventListener('input', () => {
                // Clear the "All" text if this is the start of typing
                if (searchInput.value.toLowerCase().startsWith('all')) {
                    searchInput.value = searchInput.value.substring(3); // Remove 'All' from the start
                }
                createDropdown(searchInput.value);
                dropdownContainer.style.display = 'block';
            });

            // Modify the input wrapper click handler to handle dropdown toggling
            inputWrapper.addEventListener('click', (e) => {
                e.stopPropagation();
                const isOpen = dropdownContainer.style.display === 'block';
                
                if (isOpen) {
                    dropdownContainer.style.display = 'none';
                    dropdownIcon.classList.remove('active');
                } else {
                    // Close any other open dropdowns first
                    document.querySelectorAll('.searchable-select-dropdown').forEach(dropdown => {
                        if (dropdown !== dropdownContainer) {
                            dropdown.style.display = 'none';
                        }
                    });
                    
                    createDropdown(searchInput.value);
                    dropdownContainer.style.display = 'block';
                    dropdownIcon.classList.add('active');
                    searchInput.focus();
                }
            });

            // Handle clicks outside
            document.addEventListener('click', (e) => {
                if (!wrapper.contains(e.target) && !e.target.closest('.searchable-select-wrapper')) {
                    dropdownContainer.style.display = 'none';
                    dropdownIcon.classList.remove('active');
                    updateSelected();
                }
            });

            // Setup initial state
            updateSelected();
            
            // Add elements to DOM
            inputWrapper.appendChild(searchInput);
            inputWrapper.appendChild(dropdownIcon);
            wrapper.appendChild(inputWrapper);
            wrapper.appendChild(dropdownContainer);
            select.style.display = 'none';

            // Add keyboard navigation
            searchInput.addEventListener('keydown', (e) => {
                const items = dropdownContainer.querySelectorAll('.searchable-select-item');
                const current = dropdownContainer.querySelector('.searchable-select-item.highlighted');
                
                if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
                    e.preventDefault();
                    if (!items.length) return;
                    
                    let next;
                    if (!current) {
                        next = e.key === 'ArrowDown' ? items[0] : items[items.length - 1];
                    } else {
                        const currentIndex = Array.from(items).indexOf(current);
                        const nextIndex = e.key === 'ArrowDown' ? 
                            (currentIndex + 1) % items.length : 
                            (currentIndex - 1 + items.length) % items.length;
                        next = items[nextIndex];
                    }
                    
                    if (current) current.classList.remove('highlighted');
                    next.classList.add('highlighted');
                    next.scrollIntoView({ block: 'nearest' });
                } else if (e.key === 'Enter' && current) {
                    e.preventDefault();
                    current.click();
                } else if (e.key === 'Escape') {
                    dropdownContainer.style.display = 'none';
                    dropdownIcon.classList.remove('active');
                    searchInput.blur();
                }
            });
        }

        function filterDomains(domains) {
            const searchTerm = searchInput.value.toLowerCase();
            const maxPrice = parseInt(priceFilter.value) || Infinity;
            const selectedTld = tldFilter.value;

            return domains.filter(domain => {
                const matchesSearch = domain.domainName.toLowerCase().includes(searchTerm);
                const matchesPrice = domain.price <= maxPrice;
                const matchesTld = !selectedTld || domain.tld === selectedTld;
                return matchesSearch && matchesPrice && matchesTld;
            });
        }

        function sortDomains(domains) {
            const [criteria, direction] = sortSelect.value.split('-');
            return [...domains].sort((a, b) => {
                let comparison = 0;
                if (criteria === 'name') {
                    comparison = a.domainName.toLowerCase().localeCompare(b.domainName.toLowerCase());
                } else if (criteria === 'price') {
                    comparison = a.price - b.price;
                }
                return direction === 'desc' ? -comparison : comparison;
            });
        }

        function populateTldFilter(domains) {
            const tlds = [...new Set(domains.map(domain => domain.tld))].sort();
            tldFilter.textContent = '';
            
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = 'All';
            tldFilter.appendChild(defaultOption);
            
            tlds.forEach(tld => {
                const option = document.createElement('option');
                option.value = tld;
                option.textContent = `.${tld}`;
                tldFilter.appendChild(option);
            });
        }

        function updateFiltersAndDisplay() {
            const params = {
                search: searchInput.value,
                tld: tldFilter.value,
                maxPrice: priceFilter.value,
                sort: sortSelect.value
            };
            updateUrl(params);
            const filteredDomains = filterDomains(allDomains);
            displayDomains(filteredDomains);
        }

        // Event Listeners
        searchButton.addEventListener('click', updateFiltersAndDisplay);
        searchInput.addEventListener('keyup', (e) => {
            if (e.key === 'Enter') updateFiltersAndDisplay();
        });
        priceFilter.addEventListener('change', updateFiltersAndDisplay);
        tldFilter.addEventListener('change', updateFiltersAndDisplay);
        sortSelect.addEventListener('change', updateFiltersAndDisplay);

        // Load domains
        fetch('/data/output/domains.json')
            .then(response => {
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                return response.json();
            })
            .then(domains => {
                allDomains = domains;
                populateTldFilter(domains);
                
                // Make TLD filter searchable
                makeSelectSearchable(document.getElementById('tld-filter'));

                const params = getUrlParameters();
                if (params.search) searchInput.value = params.search;
                if (params.tld) tldFilter.value = params.tld;
                if (params.maxPrice) priceFilter.value = params.maxPrice;
                if (params.sort) sortSelect.value = params.sort;

                const filteredDomains = filterDomains(domains);
                displayDomains(filteredDomains);

                // Initialize autocomplete after domains are loaded
                initializeAutocomplete();
            })
            .catch(error => {
                console.error('Error loading domains:', error);
                const showError = (element) => {
                    element.textContent = '';
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'error-message';
                    errorDiv.innerHTML = `
                        <p>Error loading domains: ${error.message}</p>
                        <p>Please try refreshing the page or contact support if the problem persists.</p>
                    `;
                    element.appendChild(errorDiv);
                };
                
                showError(domainGrid);
                showError(domainListBody);
            });

        // Handle browser back/forward
        window.addEventListener('popstate', () => {
            const params = getUrlParameters();
            searchInput.value = params.search;
            tldFilter.value = params.tld;
            priceFilter.value = params.maxPrice;
            sortSelect.value = params.sort;
            const filteredDomains = filterDomains(allDomains);
            displayDomains(filteredDomains);
        });
    }
});