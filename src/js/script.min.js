document.addEventListener("DOMContentLoaded", function() {
    const domainGrid = document.getElementById("domain-grid");
    const domainListBody = document.querySelector(".domain-list-body");
    const searchInput = document.getElementById("search-input");
    const searchButton = document.getElementById("search-button");
    const priceFilter = document.getElementById("price-filter");
    const tldFilter = document.getElementById("tld-filter");
    const sortSelect = document.getElementById("sort-select");
    const gridViewBtn = document.getElementById("grid-view-btn");
    const listViewBtn = document.getElementById("list-view-btn");
    const domainContainer = document.getElementById("domain-container");
    
    let allDomains = [];
    let currentView = 'list';  // Set default view to list

    // View Toggle Handlers
    gridViewBtn.addEventListener('click', () => {
        setView('grid');
    });

    listViewBtn.addEventListener('click', () => {
        setView('list');
    });

    function setView(view) {
        currentView = view;
        domainContainer.className = `${view}-view`;
        
        // Update button states
        gridViewBtn.classList.toggle('active', view === 'grid');
        listViewBtn.classList.toggle('active', view === 'list');

        // Save preference
        localStorage.setItem('preferredView', view);
    }

    // Load preferred view
    const savedView = localStorage.getItem('preferredView') || 'list';
    setView(savedView);

    // Show loading state
    domainGrid.innerHTML = '<div class="loading">Loading domains...</div>';
    domainListBody.innerHTML = '<div class="loading">Loading domains...</div>';

    // Fetch and display domains
    fetch('/data/output/domains.json')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(domains => {
            allDomains = domains;
            populateTldFilter(domains);
            displayDomains(domains);
            console.log(`Loaded ${domains.length} domains successfully`);
        })
        .catch(error => {
            console.error('Error loading domains:', error);
            const errorMessage = `
                <div class="error-message">
                    <p>Error loading domains: ${error.message}</p>
                    <p>Please try refreshing the page or contact support if the problem persists.</p>
                </div>
            `;
            domainGrid.innerHTML = errorMessage;
            domainListBody.innerHTML = errorMessage;
        });

    function populateTldFilter(domains) {
        const tlds = [...new Set(domains.map(domain => domain.tld))].sort();
        tldFilter.innerHTML = '<option value="">All</option>';
        tlds.forEach(tld => {
            const option = document.createElement('option');
            option.value = tld;
            option.textContent = `.${tld}`;
            tldFilter.appendChild(option);
        });
    }

    function filterDomains(domains) {
        const searchTerm = searchInput.value.toLowerCase();
        const maxPrice = parseInt(priceFilter.value) || Infinity;
        const selectedTld = tldFilter.value;

        return domains.filter(domain => {
            const matchesSearch = domain.domainName.toLowerCase().includes(searchTerm);
            const matchesPrice = domain.price <= maxPrice;
            const matchesTld = !selectedTld || domain.tld === selectedTld;
            return matchesSearch && matchesPrice && matchesTld;
        });
    }

    function sortDomains(domains) {
        const [criteria, direction] = sortSelect.value.split('-');
        return [...domains].sort((a, b) => {
            let comparison = 0;
            if (criteria === 'name') {
                comparison = a.domainName.localeCompare(b.domainName);
            } else if (criteria === 'price') {
                comparison = a.price - b.price;
            }
            return direction === 'desc' ? -comparison : comparison;
        });
    }

    function displayDomains(domains) {
        const sortedDomains = sortDomains(domains);
        
        if (sortedDomains.length === 0) {
            const noResults = '<div class="error-message">No domains found matching your criteria.</div>';
            domainGrid.innerHTML = noResults;
            domainListBody.innerHTML = noResults;
            return;
        }
        
        // Update Grid View
        domainGrid.innerHTML = '';
        sortedDomains.forEach(domain => {
            domainGrid.appendChild(createGridItem(domain));
        });

        // Update List View
        domainListBody.innerHTML = '';
        sortedDomains.forEach(domain => {
            domainListBody.appendChild(createListItem(domain));
        });
    }

    function createGridItem(domain) {
        const div = document.createElement("div");
        div.className = "domain-item";

        const img = document.createElement("img");
        img.src = domain.imageUrl;
        img.alt = `${domain.domainName} thumbnail`;
        img.className = "lazy-image";
        img.onerror = () => {
            const fallbackDiv = document.createElement("div");
            fallbackDiv.className = "domain-thumbnail-fallback";
            fallbackDiv.style.backgroundColor = `hsl(${Math.random() * 360}, 70%, 80%)`;
            fallbackDiv.textContent = domain.domainName.split('.')[0];
            img.parentNode.replaceChild(fallbackDiv, img);
        };
        div.appendChild(img);

        const h2 = document.createElement("h2");
        h2.textContent = domain.domainName;
        div.appendChild(h2);

        const p = document.createElement("p");
        p.className = "price";
        p.textContent = `$${domain.price.toLocaleString()}`;
        div.appendChild(p);

        const a = document.createElement("a");
        a.href = `domains/${domain.domainName}.html`;
        a.className = "buy-button";
        a.textContent = "View Details";
        div.appendChild(a);

        return div;
    }

    function createListItem(domain) {
        const div = document.createElement("div");
        div.className = "domain-list-item";

        const nameDiv = document.createElement("div");
        nameDiv.className = "domain-list-name";
        nameDiv.textContent = domain.domainName.split('.')[0];

        const tldDiv = document.createElement("div");
        tldDiv.className = "domain-list-tld";
        tldDiv.textContent = `.${domain.tld}`;

        const priceDiv = document.createElement("div");
        priceDiv.className = "domain-list-price";
        priceDiv.textContent = `$${domain.price.toLocaleString()}`;

        const actionDiv = document.createElement("div");
        actionDiv.className = "domain-list-action";
        const a = document.createElement("a");
        a.href = `domains/${domain.domainName}.html`;
        a.className = "buy-button";
        a.textContent = "View Details";
        actionDiv.appendChild(a);

        div.appendChild(nameDiv);
        div.appendChild(tldDiv);
        div.appendChild(priceDiv);
        div.appendChild(actionDiv);

        return div;
    }

    // Event Listeners
    searchButton.addEventListener('click', () => {
        const filteredDomains = filterDomains(allDomains);
        displayDomains(filteredDomains);
    });

    searchInput.addEventListener('keyup', (e) => {
        if (e.key === 'Enter') {
            const filteredDomains = filterDomains(allDomains);
            displayDomains(filteredDomains);
        }
    });

    priceFilter.addEventListener('change', () => {
        const filteredDomains = filterDomains(allDomains);
        displayDomains(filteredDomains);
    });

    tldFilter.addEventListener('change', () => {
        const filteredDomains = filterDomains(allDomains);
        displayDomains(filteredDomains);
    });

    sortSelect.addEventListener('change', () => {
        const filteredDomains = filterDomains(allDomains);
        displayDomains(filteredDomains);
    });
});